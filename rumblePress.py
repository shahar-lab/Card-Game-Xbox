from psychopy import core, visual, gui, data, event
from psychopy.tools.filetools import fromFile, toFile
import numpy as np, random, serial, time
from numpy.random import random
import pygame, time
from psychopy.hardware import joystick

import ctypes


def mainRumblePress(dataFile):
    # Define necessary structures
    class XINPUT_VIBRATION(ctypes.Structure):
        _fields_ = [("wLeftMotorSpeed", ctypes.c_ushort),
                    ("wRightMotorSpeed", ctypes.c_ushort)]

    xinput = ctypes.windll.xinput1_4  # Load Xinput.dll

    # Set up function argument types and return type
    XInputSetState = xinput.XInputSetState
    XInputSetState.argtypes = [ctypes.c_uint, ctypes.POINTER(XINPUT_VIBRATION)]
    XInputSetState.restype = ctypes.c_uint

    # A helper function:
    def set_vibration(controller, left_motor, right_motor):
        vibration = XINPUT_VIBRATION(int(left_motor * 65535), int(right_motor * 65535))
        XInputSetState(controller, ctypes.byref(vibration))

    # Initilizing Game
    pygame.init()
    clock = pygame.time.Clock()
    keepPlaying = True
    j = pygame.joystick.Joystick(0)
    j.init()
        
    # Create a window
    win = visual.Window(
        [800, 600], fullscr = True, monitor="testMonitor", units="deg", color=(255, 255, 255)
    )
    mytimer = core.Clock()

    # Number of trials and Stimuli Pictures
    from random import sample
    n = 2 # Number of trials, Prev was 50
    picList = ["1.jpg","2.jpg","3.jpg","4.jpg"]
    stim_id = np.zeros(n)

    # Random Walk for 200 Trials and Reward Stimuli
    won = visual.ImageStim(win, image="rw.jpg", pos=[0, 0], size=3)
    lost = visual.ImageStim(win, image="ur.jpg", pos=[0, 0], size=4)
    fixation = visual.TextStim(win, text="+", pos=[0, 0], color=(0, 0, 0))
    RW = np.zeros((4,200))
    RW[0] = [0.59, 0.60855, 0.59986, 0.57414, 0.54503, 0.50689, 0.51806, 0.51453, 0.52168, 0.5375, 0.59168, 0.5644, 0.61124, 0.59515, 0.59646, 0.59755, 0.59434, 0.59156, 0.57219, 0.61166, 0.626, 0.6168, 0.62828, 0.59664, 0.58137, 0.59153, 0.59209, 0.62092, 0.60553, 0.62351, 0.67525, 0.66982, 0.69644, 0.66794, 0.62313, 0.61142, 0.62674, 0.63389, 0.65477, 0.68273, 0.70691, 0.68576, 0.67643, 0.6791, 0.67626, 0.65117, 0.66235, 0.6812, 0.70072, 0.71748, 0.6572, 0.62186, 0.63145, 0.60271, 0.61449, 0.62758, 0.66966, 0.71685, 0.70001, 0.69174, 0.69175, 0.71231, 0.73454, 0.72718, 0.77817, 0.76459, 0.7619, 0.79957, 0.73978, 0.74956, 0.76764, 0.78366, 0.75914, 0.75787, 0.77618, 0.8, 0.7824, 0.77048, 0.74938, 0.77363, 0.77415, 0.78524, 0.78071, 0.76741, 0.78985, 0.78084, 0.75456, 0.77605, 0.72869, 0.76332, 0.73392, 0.72678, 0.70428, 0.71249, 0.67741, 0.72446, 0.74163, 0.73042, 0.73984, 0.71415, 0.67902, 0.71098, 0.72772, 0.72486, 0.755, 0.76051, 0.78077, 0.78299, 0.79717, 0.8, 0.79686, 0.8, 0.79033, 0.8, 0.79113, 0.8, 0.77785, 0.79169, 0.8, 0.8, 0.8, 0.79676, 0.79114, 0.8, 0.8, 0.8, 0.78091, 0.76393, 0.74131, 0.72849, 0.73309, 0.73576, 0.72116, 0.7242, 0.71442, 0.74362, 0.71881, 0.72768, 0.68713, 0.68175, 0.68211, 0.70267, 0.7159, 0.71892, 0.72298, 0.70709, 0.73057, 0.74357, 0.74163, 0.71304, 0.66764, 0.68619, 0.68045, 0.6874, 0.66442, 0.69307, 0.68744, 0.70449, 0.69873, 0.70607, 0.719, 0.76157, 0.74948, 0.72723, 0.71785, 0.69515, 0.70794, 0.72022, 0.71694, 0.6904, 0.68246, 0.65897, 0.63708, 0.65149, 0.67605, 0.69246, 0.64832, 0.65066, 0.64645, 0.65404, 0.6743, 0.65096, 0.64816, 0.60784, 0.60833, 0.59135, 0.60988, 0.60875, 0.60348, 0.5928, 0.54931, 0.57344, 0.57772, 0.55536, 0.58258, 0.58841, 0.60402, 0.61841, 0.57963, 0.56608]
    RW[1] = [0.73, 0.69477, 0.70981, 0.68167, 0.66103, 0.68721, 0.70422, 0.66169, 0.60452, 0.5986, 0.59034, 0.52893, 0.50395, 0.50663, 0.49114, 0.50503, 0.52875, 0.509, 0.50398, 0.48795, 0.46267, 0.44465, 0.40493, 0.42385, 0.4501, 0.46205, 0.45165, 0.4144, 0.40904, 0.3783, 0.35958, 0.29948, 0.32876, 0.29555, 0.3102, 0.33093, 0.30782, 0.27569, 0.27343, 0.24817, 0.23914, 0.2, 0.21234, 0.23147, 0.25434, 0.23634, 0.25642, 0.27087, 0.25684, 0.26541, 0.26841, 0.26389, 0.25089, 0.26098, 0.26862, 0.29197, 0.27339, 0.24231, 0.22314, 0.20632, 0.21145, 0.2, 0.22608, 0.23513, 0.22204, 0.2, 0.2, 0.2, 0.2, 0.20346, 0.24754, 0.23034, 0.22687, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.21982, 0.24204, 0.2769, 0.25974, 0.23493, 0.23181, 0.25346, 0.28623, 0.2771, 0.29732, 0.29277, 0.30736, 0.27881, 0.29417, 0.26901, 0.26978, 0.29658, 0.29956, 0.32884, 0.33698, 0.29633, 0.28671, 0.26849, 0.26927, 0.28012, 0.23941, 0.23452, 0.2045, 0.2, 0.2, 0.2, 0.21914, 0.23789, 0.24337, 0.25857, 0.28827, 0.29166, 0.32043, 0.32726, 0.31384, 0.25988, 0.24805, 0.26025, 0.21771, 0.2208, 0.20579, 0.24572, 0.27938, 0.30523, 0.28754, 0.26683, 0.22027, 0.24229, 0.2, 0.2, 0.2, 0.21874, 0.25229, 0.26727, 0.2785, 0.31688, 0.28566, 0.26945, 0.267, 0.24123, 0.23993, 0.2, 0.24012, 0.26138, 0.28537, 0.26077, 0.25557, 0.22915, 0.28465, 0.26534, 0.2574, 0.23321, 0.25981, 0.26528, 0.26593, 0.28974, 0.3205, 0.31096, 0.303, 0.26338, 0.24625, 0.23979, 0.22504, 0.21438, 0.22616, 0.26158, 0.23394, 0.28083, 0.2957, 0.33224, 0.34674, 0.34334, 0.33785, 0.30286, 0.28009, 0.24916, 0.27594, 0.26306, 0.29049, 0.26554, 0.27301, 0.25483, 0.29045, 0.27398, 0.31666, 0.30212, 0.30433, 0.34615, 0.34824, 0.35553, 0.34421, 0.36266, 0.32926, 0.35388, 0.37202, 0.36768]
    RW[2] = [0.63, 0.65914, 0.66394, 0.66388, 0.66765, 0.66839, 0.64912, 0.6088, 0.58948, 0.55133, 0.55323, 0.5739, 0.57059, 0.55866, 0.58417, 0.60024, 0.59991, 0.5763, 0.60982, 0.61674, 0.63552, 0.64472, 0.63783, 0.6338, 0.61148, 0.61056, 0.61382, 0.58598, 0.58579, 0.56046, 0.54781, 0.56741, 0.52133, 0.51182, 0.53021, 0.53967, 0.50651, 0.5483, 0.49715, 0.55616, 0.53713, 0.49724, 0.50894, 0.50577, 0.47932, 0.48081, 0.51998, 0.52955, 0.53245, 0.53703, 0.52474, 0.51977, 0.51782, 0.50662, 0.5144, 0.50699, 0.51061, 0.54461, 0.52952, 0.56946, 0.58083, 0.54793, 0.52928, 0.55995, 0.54814, 0.53477, 0.54964, 0.58321, 0.58569, 0.55872, 0.54518, 0.56055, 0.57047, 0.56401, 0.59619, 0.57751, 0.57445, 0.6179, 0.67849, 0.65113, 0.63744, 0.66942, 0.6548, 0.64936, 0.63738, 0.627, 0.62445, 0.66844, 0.70248, 0.73695, 0.74432, 0.75857, 0.75676, 0.73719, 0.73871, 0.73833, 0.74632, 0.75333, 0.76895, 0.79782, 0.76457, 0.76799, 0.76234, 0.74699, 0.76074, 0.79037, 0.78278, 0.74525, 0.77306, 0.78183, 0.77232, 0.77419, 0.8, 0.8, 0.7975, 0.79084, 0.74786, 0.7654, 0.78448, 0.77683, 0.79231, 0.8, 0.79643, 0.8, 0.8, 0.8, 0.79846, 0.8, 0.79261, 0.77879, 0.77755, 0.78665, 0.78592, 0.77864, 0.8, 0.8, 0.78408, 0.8, 0.77465, 0.74251, 0.75599, 0.73359, 0.75833, 0.8, 0.8, 0.8, 0.77579, 0.79064, 0.8, 0.8, 0.79222, 0.78359, 0.7725, 0.75178, 0.72107, 0.77864, 0.73657, 0.74616, 0.71402, 0.73237, 0.70933, 0.72222, 0.70666, 0.71881, 0.72838, 0.74825, 0.72088, 0.75151, 0.76062, 0.76895, 0.78199, 0.78889, 0.78567, 0.75796, 0.74696, 0.78837, 0.78089, 0.77682, 0.78529, 0.8, 0.78582, 0.76967, 0.77753, 0.8, 0.77608, 0.79256, 0.79157, 0.77994, 0.75926, 0.75131, 0.73461, 0.69218, 0.70807, 0.67649, 0.70205, 0.70639, 0.71962, 0.71601, 0.67221, 0.66197]
    RW[3] = [0.64, 0.57178, 0.58403, 0.57426, 0.52334, 0.58495, 0.62316, 0.60968, 0.5992, 0.60165, 0.62418, 0.61034, 0.57205, 0.60242, 0.55222, 0.56968, 0.52079, 0.5114, 0.54186, 0.59116, 0.61515, 0.634, 0.59901, 0.60168, 0.55569, 0.61173, 0.60044, 0.5985, 0.6322, 0.62338, 0.6112, 0.58426, 0.61598, 0.59208, 0.60231, 0.5842, 0.58535, 0.57603, 0.53205, 0.53199, 0.5599, 0.58315, 0.56068, 0.56611, 0.59064, 0.57024, 0.59656, 0.60031, 0.65109, 0.69591, 0.67161, 0.6605, 0.6843, 0.67866, 0.69237, 0.70846, 0.71944, 0.72435, 0.69492, 0.72473, 0.75133, 0.73827, 0.74656, 0.73579, 0.7547, 0.78407, 0.76729, 0.8, 0.8, 0.8, 0.78581, 0.78864, 0.76987, 0.73595, 0.71397, 0.69525, 0.63913, 0.65761, 0.68064, 0.6613, 0.65924, 0.64607, 0.63886, 0.60633, 0.65108, 0.63768, 0.58571, 0.61626, 0.58449, 0.58729, 0.57508, 0.61484, 0.59708, 0.5903, 0.62204, 0.62609, 0.60881, 0.59223, 0.59646, 0.59879, 0.61639, 0.64874, 0.66255, 0.6582, 0.63582, 0.6323, 0.61532, 0.5992, 0.57536, 0.55373, 0.54228, 0.51189, 0.45811, 0.47189, 0.44745, 0.44181, 0.45928, 0.41557, 0.35613, 0.37744, 0.3616, 0.34519, 0.33806, 0.33982, 0.32983, 0.34072, 0.3206, 0.34826, 0.3294, 0.33216, 0.31559, 0.28004, 0.25411, 0.2218, 0.23873, 0.22962, 0.25241, 0.23636, 0.2, 0.2, 0.2, 0.2, 0.2, 0.23468, 0.24647, 0.22686, 0.25205, 0.29672, 0.24117, 0.24596, 0.24184, 0.28171, 0.29952, 0.33002, 0.35166, 0.34457, 0.35026, 0.3689, 0.37453, 0.35284, 0.37602, 0.37977, 0.3442, 0.38061, 0.38801, 0.40946, 0.41179, 0.43104, 0.40772, 0.4096, 0.40279, 0.41151, 0.41988, 0.39367, 0.38642, 0.40296, 0.42993, 0.46875, 0.51018, 0.56256, 0.54792, 0.56877, 0.56864, 0.57404, 0.57409, 0.60024, 0.58054, 0.58703, 0.59834, 0.60747, 0.59424, 0.57932, 0.58213, 0.57051, 0.58878, 0.60548, 0.57385, 0.54559, 0.55175, 0.54545]

    for t in range(1, n+1):
        # Draw the stimuli and update the window
        pictures = sample(picList, 2)
        btnL = visual.ImageStim(win, image=pictures[0], pos=[-5, 0], size=(5,8))
        btnR = visual.ImageStim(win, image=pictures[1], pos=[5, 0], size=(5,8))
        fixation.draw()
        win.update()
        core.wait(0.3)
        fixation.draw()
        btnL.draw()
        btnR.draw()
        win.update()
        key = 0
        while True:
            events = pygame.event.poll()
            if (events.type == pygame.JOYBUTTONDOWN):
                print(events.button)
                #Event 4 -> Pressing down left button, Event 5 -> Pressing down right button
                if events.button == 4:
                    btnL.draw()
                    stim_id = int(pictures[0][0])
                    other_id = int(pictures[1][0])
                    prob1 = RW[stim_id-1][t-1]
                    prob2 = RW[other_id-1][t-1]
                    win.update()
                    key = 4
                    stimapr = "pressed left button"
                    dataFile.write("%s,%s,%s,%s,%s,%s,%s,%s\n" 
                        % (
                            t,
                            pictures[0][0],
                            pictures[1][0],
                            prob1,
                            prob2,
                            stimapr,
                            key,
                            "Chose Card Number " + str(stim_id),
                        )
                    )
                    # Rumble feedback
                    set_vibration(0, 1, 1)
                    time.sleep(0.45)
                    set_vibration(0, 0, 0)
                    break
                elif events.button == 5:
                    btnR.draw()
                    stim_id = int(pictures[1][0])
                    other_id = int(pictures[0][0])
                    prob1 = RW[stim_id-1][t-1]
                    prob2 = RW[other_id-1][t-1]
                    win.update()
                    key = 5
                    stimapr = "pressed right button"
                    dataFile.write("%s,%s,%s,%s,%s,%s,%s,%s\n" 
                        % (
                            t,
                            pictures[0][0],
                            pictures[1][0],
                            stim_id,
                            other_id,
                            stimapr,
                            key,
                            "Chose Card Number " + str(stim_id),
                        )
                    )                   
                    # Rumble feedback
                    set_vibration(0, 1, 1)
                    time.sleep(0.45)
                    set_vibration(0, 0, 0)
                    break       
        fixation.draw()
        core.wait(0.3)     
    
        ##########################################
        # outcome using Random Walk for n trials #
        ##########################################
        curr_prob = RW[stim_id-1][t-1]
        if (random() < curr_prob):
            won.draw()
            stimapr = "Showing Reward"
        else:
            lost.draw()
            stimapr = "Showing Loss"
        win.update()
        #dataFile.write("%i,%i,%s\n" % (t, key,stimapr))
        core.wait(1)

    # iti
    #dataFile.write("%i,%i\n" % (t, key,stimapr ))
    